name: CI/CD Pipeline

env:
  IMAGE_NAME: prod-large

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: üîç Code Linting
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint Dockerfile with Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install linters
        run: pip install flake8 black

      - name: Run flake8
        run: flake8 main.py || true

      - name: Run black check
        run: black --check . || true

  security:
    name: üîí Security Scanning
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg lsb-release
          curl -fsSL https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/trivy.gpg
          echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Trivy scan (filesystem)
        run: trivy fs . --exit-code 0 --severity HIGH,CRITICAL

      - name: Docker build for scanning
        run: docker build -t ${{ env.IMAGE_NAME }}:latest .

      - name: Trivy scan (Docker image)
        run: trivy image ${{ env.IMAGE_NAME }}:latest --exit-code 0 --severity HIGH,CRITICAL

      - name: Checkov scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
        continue-on-error: true

  build_and_push:
    name: üê≥ Docker Build & Push
    runs-on: ubuntu-latest
    needs: [lint, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up DockerHub credentials
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USER }}" --password-stdin

      - name: Build image
        run: docker build -t ${{ secrets.DOCKERHUB_USER }}/prod-large:latest .

      - name: Push to DockerHub
        run: docker push ${{ secrets.DOCKERHUB_USER }}/prod-large:latest