name: CI/CD Docker Security Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: yourdockerhubuser/prod-large

jobs:
  lint:
    name: Lint Dockerfile and Python
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint Dockerfile with Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning  # ⬅️ Не проваливает pipeline

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install flake8
        run: pip install flake8

      - name: Lint Python code
        run: |
          flake8 main.py || true  # ⬅️ Не валим pipeline на варнингах

  scan:
    name: Static Analysis (Trivy + Checkov)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg lsb-release
          curl -fsSL https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/trivy.gpg
          echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Trivy scan (filesystem)
        run: trivy fs . --exit-code 0 --severity HIGH,CRITICAL

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          soft_fail: true  # ⬅️ Не проваливает pipeline

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, scan]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: DEBUG DockerHub credentials
        run: |
          echo "USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}"
          echo "TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}" | wc -c

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/prod-large:latest .

      - name: Push Docker image
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/prod-large:latest